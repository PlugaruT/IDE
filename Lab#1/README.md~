# Interactive Development Environments Laboratory Work #1

## Command Line Interface; CLI Editors; Setting Server Environment; Version Control Systems

### Prerequisites:
  - IDEs: Command Line Interface (CLI), CLI Editors
  - Languages: bash
  - Frameworks:
  - Technologies: Version Control Systems (VCS)
  - Time: 3 hours

### Objectives:
  - Understanding and using CLI (basic level)
  - Administration of a remote linux machine using SSH
  - Ability to work remotely (remote code editing)
  - Ability to work with VCS

### Technical Prerequisites:
  - Connection to a remote server via SSH (you can use a virtual machine as a remote server)
  - VCS on remote server
  - CLI text editor (vi, vim, emacs or nano) with necessary plugins (if necessary)

### Mandatory Tasks:
  - Connect to a remote server via SSH
  - Initialize a repository on server
  - Create a file in repository folder, write in your name, save it and commit it

### Tasks With Points:
  - Connect to server using public key (1 pt)
  - Create 2 more branches with at least one unique committed file per branch (1 pt)
  - Set a branch to track a remote origin on which you are able to push (ex. github, bitbucket or a custom server) (1 pt)
  - Reset a branch to previous commit, reset a branch to some specific commit (1 pt)
  - Restore a reset branch back to its previous state (1 pt)
  - GIT cherry-pick, rebase (1 pt)
  - Create a VCS hook (1 pt)
  - Make your CLI text editor to highlight code (1 pt)
  - Create a VCS alias (1 pt)
  - Master any CLI editor (ex. VIM). Learn 10 commands' sets (a/A/i/I/o/O is one set) to prove your mastery (1 pt)
  - Create your own server (ex. virtual machine) (2 pt)
  - Create a VCS merge conflict and solve it (1 pt)

# REPORT

### Connect to a remote server via SSH

I have installed Ubuntu Server on virtualbox on my linux machine. I started the virtual machine and I have connected to it by typing the following command in Terminal:
```
  ssh 192.168.1.239
```
After this I have entered the user password from my server 
### Initialize a repository on server & Create a file in repository folder, write in your name, save it and commit it

```
  cd IDE/Lab#1
  vim README.md
  #pressed i to enter insert mode
  #pressed ESC and typed
  :wq #write & quit
  cd ../.. 
  git init
  git remote add origin git@github.com:PlugaruT/IDE.git
  git status
  git add . #add necessary files to git
  git commit -am 'Lab#1'
  git push origin master
```
I have creater a real repository on my GitHub account and pushed all my work there.

### Create 2 more branches with at least one unique committed file per branch

```

  git checkout -b branch1 #created switched to a new branch "branch1"
  vim branch1.txt #created a file and wrote some text in it
  git add branch1.txt
  git commit -m 'branch1.txt added' 
  git push origin branch1 #pushed the file to branch1

  git checkout master #switched back to master branch
 
  git checkout -b branch2 #created branch2
  vim branch2.txt #created a file and wrote some text in it
  git add branch2.txt
  git commit -m 'branch2.txt added'
  git push origin branch2
  
  git chechout master
  git merge branch2 #merged branch2 with master branch
    #Updating 17432e1..8512197
    #Fast-forward
    #Lab#1/branch2.txt | 1 +
    #1 file changed, 1 insertion(+)
    #create mode 100644 Lab#1/branch2.txt
  git branch -d branch2 #deleted branch2
    #Deleted branch branch2 (was 8512197).

```

### Learn 10 vim commands
Commands I have used the most:
```
 - i #enter insert mode
 - esc
 - dd #delete current line
 - gg #move cursor to first line
 - :wq #write and quit
 - h j k l #move through file
 - /word #search "word" in file
 - dG #delete all lines
 - u #undo last change
 - v #select text
```

### Create a VCS alias

In order to create a VCS alias I have edited the ```~/.gitconfig``` file
```
vim ~/.gitconfig
```
This is how the section ```alias``` looks:
```
[alias]
    st = status
    co = checkout
    lg = log --graph --pretty=format:'%C(bold red)%h%Creset -%C(yellow)%    d%Creset %s %Cgreen(%cr) %C(bold green)<%an>%Creset' --abbrev-commit --date=    relative
```
Now I can use shortcuts like ```git st``` instead of ```git status```

### Create a VCS merge conflict and solve it

For this I have created a new branch ```branch3``` and edited the file ```branch2.txt```. In ```master``` branch this file looked like this:
 
>This is file from Branch master

In ```branch3``` same file looked like this:

>This is file from Branch branch3

To merge this two branches I typed the following in Terminal:
```
  git checkout master #switched in master branch
  git merge branch3
    #Auto-merging Lab#1/branch2.txt
    #CONFLICT (content): Merge conflict in Lab#1/branch2.txt
    #Automatic merge failed; fix conflicts and then commit the result.
  vim branch2.txt ```branch2.txt``` 
```
The content of file ```branch2.txt```:
```
   <<<<<<< HEAD
   This is file from Branch master
   =======
   This is file from Branch branch
   >>>>>>> branch3
```
To solve this conflict I have deleted the changes from ```branch3``` and merging this two branches succeded.

### Install a code-highlighter plugin in your CLI text editor:

   I have installed a vim plugin manager named Vundle. Using this plugin manager it is very easy to install plugins for vim. I have installed a C++ syntax highlighter using this commands:
```
   vim ~/.vimrc 
```
I added this line in file:
```
  Plugin 'octol/vim-cpp-enhanced-highlight'
```
and the in vim typed:
```
  :PluginInstall
```
Now the plugin is installed and ready for use.

### Connect to server using public key:

   For me it was easy to do this task because I already have a ssh key added to my GitHub and Bitbucket accounts. This are the commands to add a key to my GitHub account:
```
    # Creates a new ssh key, using the provided email as a label
    ssh-keygen -t rsa -C "plugaru_tudor@hotmail.com"
    # start the ssh-agent in the background
    eval "\$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa
    sudo apt-get install xclip #Downloads and install xclip
    xclip -sel clip < ~/.ssh/id_rsa.pub Copies the contents of the id_rsa.pub file to your clipboard
```
   Now we have to go to our GitHub account to Settings-SSH keys-Add SSH Key and paste the key there. To check if the key was successfully added, in out Terminal execute this command:
```
    ssh -T git@github.com
```
The result is this:
```
    Hi PlugaruT! You have successfully authenticated, but GitHub does not provide shell access.
```
